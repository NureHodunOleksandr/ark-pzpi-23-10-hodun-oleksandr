Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії






Доповідь
з дисципліни: «Аналіз та рефакторинг коду»
на тему: «Правила з оформлення та стилю написання коду мовою C»





Виконав
ст. гр. ПЗПІ-23-10
Годун Олександр Васильович


Перевірили викладачі:
Лещинська І. О.,
Сокорчук І. П.,
Дашенков Д. С.



Харків 2025

ЗМІСТ
      МЕТА РОБОТИ	2
      ХІД РОБОТИ	3
      ВИСНОВКИ	8
      ДОДАТОК А:	9
      ДОДАТОК Б:	10
      ПЕРЕЛІК ДЖЕРЕЛ	22
      



МЕТА РОБОТИ
     Метою роботи є навчитися писати чистий і підтримуваний код мовою С.
Для цього ми розглянемо чотири основні напрямки:
1. Ознайомлення з принципами чистого коду та правилами його форматування.
2. Формування навичок правильного іменування змінних, функцій і структур.
3. Організація проєкту за допомогою заголовкових файлів і Makefile.
4. Ознайомлення зі стандартами мови С (ANSI C, C99) та дотримання стилю оформлення коду.
     Таким чином, головна мета — не тільки написати працюючий код, а зробити його зрозумілим, охайним і стандартизованим.


ХІД РОБОТИ
     Сьогодні я хочу представити доповідь на тему «Основні рекомендації написання коду мовою C».
     Метою роботи є навчитися писати чистий і підтримуваний код мовою С.
Для цього ми розглянемо чотири основні напрямки:
5. Ознайомлення з принципами чистого коду та правилами його форматування.
6. Формування навичок правильного іменування змінних, функцій і структур.
7. Організація проєкту за допомогою заголовкових файлів і Makefile.
8. Ознайомлення зі стандартами мови С (ANSI C, C99) та дотримання стилю оформлення коду.
     Таким чином, головна мета — не тільки написати працюючий код, а зробити його зрозумілим, охайним і стандартизованим.
     Мова програмування C є однією з базових у світі розробки програмного забезпечення. Вона надає програмісту потужні інструменти низькорівневого доступу до пам’яті й апаратних ресурсів, але при цьому не має автоматичного керування пам’яттю. Це означає, що будь-які недоліки у стилі чи структурі програми можуть призвести до витоків пам’яті, збоїв роботи або значного ускладнення подальшої підтримки коду. Саме тому дотримання перевірених принципів і стандартів у C є не лише питанням зручності, а й обов’язковою умовою надійності.
     Одним з основних підходів до розробки якісного коду є дотримання принципів чистоти й підтримуваності. Передусім варто згадати принцип KISS, що розшифровується як Keep It Simple, Stupid. 
     Його сутність у тому, що програма повинна бути якомога простішою, без зайвої складності. Простота полегшує розуміння логіки, зменшує кількість помилок і робить налагодження швидшим. Приклади цього принципу можна побачити навіть у дрібних речах: наприклад, коли логічну змінну повертають без додаткових умов, або коли використовують стандартну бібліотечну функцію strlen() замість того, щоб писати власний підрахунок довжини рядка.
     Не менш важливим є принцип DRY — Don’t Repeat Yourself, який вимагає уникати дублювання коду. Усе, що повторюється у проєкті, слід винести в одне авторитетне місце: створювати функції для часто вживаних операцій, замість копіювати однакові блоки, або користуватися циклами для роботи з масивами замість багаторазового повторення одного й того самого присвоєння. Якщо дві різні частини проєкту потребують однакової логіки, таку логіку варто винести в окремий модуль і підключати через заголовковий файл. Це спрощує внесення змін та унеможливлює розходження між копіями одного й того самого коду.
     Третій принцип — YAGNI, що означає You Aren’t Gonna Need It. Його суть у тому, щоб не створювати функціонал «про запас». Немає сенсу додавати у структури резервні поля або писати функції, які можуть знадобитися через рік. Кожен рядок коду має вирішувати конкретну поточну задачу. Надлишковий код не лише збільшує розмір програми, а й ускладнює її тестування та обслуговування.
     Ще одна важлива ідея — це пріоритет читабельності над короткістю. Читабельний код завжди виграє, навіть якщо він трохи довший. Наприклад, замість коротких і малозрозумілих імен на кшталт x чи tmp краще використовувати повні назви, які відразу пояснюють призначення змінної, такі як seconds_per_hour. Багаторядкові конструкції if–else з відступами набагато наочніші, ніж стислі однорядкові вирази, а розбиття складних математичних формул на кілька проміжних обчислень значно полегшує відладку.
     Основні правила охайного оформлення коду робить його зрозумілим і легким у підтримці.
     Важливо дотримуватись єдиних відступів — не змішувати таби й пробіли. Це прибирає хаос і робить структуру чіткою.
     Довгі рядки коду варто обмежувати 80–120 символами. Наприклад, довгий printf краще перенести на кілька рядків.
     Стиль дужок (K&R чи Allman) потрібно обрати один і використовувати скрізь. Це забезпечує єдність коду.
     Для контролю допомагають інструменти: clang-format — автоматичне форматування, cpplint — перевірка на відповідність стилю Google.
     Ще раз детальніше, у мові C є два основних інструменти: clang-format і cpplint.
     Clang-format автоматично вирівнює код: відступи, дужки, довжину рядків. Це дозволяє уникнути ручних виправлень і тримати код охайним.
     Cpplint перевіряє відповідність стилю Google C Style Guide: іменування змінних, функцій, довжину рядків. Це гарантує єдиний стиль у команді та зрозумілість коду для всіх учасників проєкту.
     Приклад: clang-format вирівнює if і printf, а cpplint підказує замінити CalcAVG() на зрозуміліше calculate_avg().
     Методологія TDD — це не тільки про тести, а й про чистий код.
Коли ми починаємо з написання тесту, ми змушені одразу думати про просту й зрозумілу структуру програми. Адже якщо код складний або хаотичний, його неможливо протестувати.
     Таким чином, TDD напряму підтримує ідею чистого та охайного коду:
* кожна функція виконує лише одну задачу;
* код стає більш передбачуваним і легшим для змін;
* а тести виконують роль «живої документації», яку можна читати як частину самого коду.
     Отже, цей підхід не лише підвищує надійність, а й робить код підтримуваним у довгостроковій перспективі.
     Наступний важливий аспект — іменування змінних, функцій та структур. У C загальноприйнятим є стиль snake_case для назв змінних: наприклад, max_value або average_speed. Короткі імена без контексту допустимі лише для лічильників у циклах на кшталт i чи j. Константи та макроси прийнято записувати великими літерами, наприклад BUFFER_SIZE. 
     Функції мають називатися дієсловами, що описують їх дію, наприклад calculate_sum чи print_report. Для логічних перевірок зручно використовувати префікси is_, has_, check_, щоб з назви відразу було зрозуміло, що функція повертає істинність умови. Структури й користувацькі типи повинні відображати сутність, яку вони описують; наприклад, структура для користувача може називатися User. У великих проєктах особливо важливо домовитися про єдиний стиль у команді та підтримувати його в усіх файлах, використовуючи автоматичні інструменти, наприклад clang-format чи cppcheck.
     Щоб полегшити підтримку, потрібно правильно організувати проєкт. Усі оголошення слід розміщувати в заголовкових файлах .h, а реалізацію — у файлах .c. Такий поділ дає змогу інкапсулювати код і запобігає повторним оголошенням. Варто дотримуватися зрозумілої структури папок: наприклад, src для вихідних файлів, include для заголовкових, build для зібраних об’єктів та tests для тестів. Для автоматизації компіляції зручно використовувати Makefile або CMake. Також важливо захищати заголовкові файли від повторного включення за допомогою директив #ifndef, #define та #endif.
     Окрему увагу слід приділити роботі з пам’яттю. У C немає автоматичного збирання сміття, тому програміст відповідає за виділення і звільнення пам’яті. 
     Динамічні масиви та структури створюють функціями malloc або calloc, і після використання їх обов’язково потрібно звільняти за допомогою free. Кожен виклик виділення пам’яті має мати парний виклик звільнення. Варто завжди перевіряти результат виділення на NULL і не виходити за межі масивів. Для пошуку витоків пам’яті допомагають інструменти статичного аналізу, наприклад valgrind. У великих проєктах доцільно створювати спеціальні функції-обгортки та вести облік операцій виділення і звільнення пам’яті, щоб уникнути хаотичного використання ресурсів.
     Ще один важливий розділ — це стандарти мови C. Дотримання стандартів гарантує, що код залишиться сумісним на різних платформах і компіляторах. Базовий рівень забезпечує ANSI C (C89/C90). Стандарт C99 додав низку сучасних можливостей, серед яких коментарі //, змінні довжини масивів та тип long long. Новіші стандарти C11 і C18 розширили мову багатопотоковістю, підтримкою Unicode та атомарними операціями, підвищивши безпеку й стабільність програм. Під час компіляції обраний стандарт можна вказати, наприклад, командою gcc -std=c11 main.c -o program.
     Не менш значущими є коментарі та документація. Коментар повинен пояснювати причини та ідеї реалізації, а не очевидні дії. Для опису функцій рекомендується використовувати багаторядкові коментарі у стилі Javadoc, що містять опис призначення, параметри та значення, яке повертає функція. Окрім внутрішніх коментарів, проєкт має супроводжуватися зовнішньою документацією, такою як файл README чи технічні інструкції. Інструменти на кшталт Doxygen допомагають автоматично генерувати повну документацію з коментарів у коді.
     На завершення варто навести кілька порівняльних прикладів. 
     Зрозумілий і відформатований код, де змінні мають осмислені назви, завжди кращий за короткий і заплутаний. 
     Винесення повторюваних конструкцій у функції не лише зменшує обсяг коду, а й знижує ризик помилок. 
     Перевірка результатів виділення пам’яті на NULL та своєчасне звільнення ресурсів захищають програму від критичних збоїв.


ВИСНОВКИ
     Підсумовуючи, можна сказати, що дотримання описаних принципів і стандартів дозволяє створювати стабільні, безпечні та легко підтримувані програмні продукти.
     Чітке іменування спрощує розуміння коду, а принципи KISS, DRY та YAGNI разом із пріоритетом читабельності гарантують його чистоту.
Сучасні стандарти C забезпечують переносимість, а правильне форматування з використанням інструментів на кшталт clang-format та cpplint підтримує єдиний стиль у команді.
     Методологія TDD сприяє структурованості та тестованості коду, а надійне керування пам’яттю підвищує стабільність програм.
     Виконана робота дала змогу не лише закріпити знання про синтаксис мови C, а й сформувати цілісний підхід до написання якісного коду, який можна впроваджувати у будь-яких проєктах.

ДОДАТОК А:
https://youtu.be/zHiAHBcXcIQ


ДОДАТОК Б:

























ПЕРЕЛІК ДЖЕРЕЛ
     • Мова програмування C++: основи, інструменти та поради. Point. URL: https://point.te.ua/programming/c-programming-language/ (дата звернення: 23.09.2025).
     • Соглашения о кодировании .NET - C# | microsoft learn. Microsoft Learn: Build skills that open doors in your career. URL: https://learn.microsoft.com/ru-ru/dotnet/csharp/fundamentals/coding-style/coding-conventions (дата звернення: 23.09.2025).
     • ???????????°????????. Правила написання коду: сила правильних імен, хороші та погані коментарі. JavaRush. URL: https://javarush.com/ua/groups/posts/uk.2610.pravila-napisannja-kodu-sila-praviljhnikh-men-khorosh-ta-pogan-komentar (дата звернення: 23.09.2025).
     • Tarantool data integration platform. Tarantool middleware for data. URL: https://www.tarantool.io/ru/doc/latest/contributing/c_style_guide/ (date of access: 23.09.2025).
     • bliki: Test Driven Development. martinfowler.com. URL: https://martinfowler.com/bliki/TestDrivenDevelopment.html?utm_source=chatgpt.com (date of access: 03.10.2025).
     • GitHub - kehanXue/google-style-clang-format: A .clang-format file for Google C++ Style. GitHub. URL: https://github.com/kehanXue/google-style-clang-format (date of access: 03.10.2025).


      2
      
      
